{
  "name": "Syllabus Advisor Bot",
  "nodes": [
    {
      "parameters": {
        "mode": "insert",
        "pineconeIndex": {
          "__rl": true,
          "value": "syllabusbot",
          "mode": "list",
          "cachedResultName": "syllabusbot"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
      "typeVersion": 1.3,
      "position": [
        -160,
        -592
      ],
      "id": "79d76e70-112c-439e-9aa3-21b08b7a180d",
      "name": "Pinecone Vector Store",
      "credentials": {
        "pineconeApi": {
          "id": "ukQUt9MCivAOTtX8",
          "name": "syllabusbot"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        -176,
        -368
      ],
      "id": "83d10f9b-32a0-4eab-b87d-039560f2ab58",
      "name": "Embeddings OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "fkYUXOJXVkie0eLD",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "dataType": "binary",
        "textSplittingMode": "custom",
        "options": {
          "metadata": {
            "metadataValues": [
              {
                "name": "={\n  \"filename\": \"{{ $json.name }}\",\n  \"drive_id\": \"{{ $json.id }}\",\n  \"board\": \"{{ ($json.name || '').split('_')[0] }}\",\n  \"grade\": \"{{ (() => {\n  const name = $json.name || '';\n  const m = name.match(/Class(\\d{1,2})/g) || [];\n  if (m.length) return m.map(s => s.replace('Class','')).join('-');\n  if (/SrSec/i.test(name)) return '12';\n  if (/Sec/i.test(name)) return '10';\n  return '';\n})() }}\",\n  \"subject\": \"{{ (() => {\n  const parts = (($json.name || '').replace(/\\.pdf$/i,'')).split('_');\n  const kept = parts.filter(p =>\n    !/^(CBSE|ICSE)$/i.test(p) &&\n    !/^Class\\d{1,2}$/i.test(p) &&\n    !/^20\\d{2}(?:[-_]\\d{2})?$/.test(p) &&\n    !/^(Syllabus|MarkingScheme|Blueprint|Practical)$/i.test(p)\n  );\n  // remove leftover trailing 2-digit year piece like \"24\"\n  if (kept.length && /^\\d{2}$/.test(kept[kept.length - 1])) kept.pop();\n  return kept.join(' ');\n})() }}\",\n  \"year\": \"{{ (() => {\n  const s = $json.name || '';\n  const m = s.match(/20\\d{2}[-_]\\d{2}/) || s.match(/20\\d{2}/);\n  return m ? m[0].replace(/[_]/g,'-') : '';\n})() }}\",\n  \"doc_type\": \"{{ ((($json.name||'').match(/(Syllabus|MarkingScheme|Blueprint|Practical)/) || [,'Syllabus'])[1]) }}\",\n  \"doc_group\": \"{{ (() => { \n  const n = ($json.name||'').replace(/\\.pdf$/i,'');\n  const board = n.split('_')[0] || '';\n  const m = n.match(/Class(\\d{1,2})/g) || [];\n  const grade = m.map(s => s.replace('Class','')).join('-');\n  const parts = n.split('_');\n  const lastClassIdx = [...parts.keys()].filter(i => /^Class\\d{1,2}$/i.test(parts[i])).pop() ?? -1;\n  const stopIdx = parts.findIndex((p,i)=> i>lastClassIdx && /^(Syllabus|MarkingScheme|Blueprint|Practical)$/i.test(p));\n  const end = stopIdx > -1 ? stopIdx : parts.length;\n  const subject = parts.slice(lastClassIdx + 1, end).join(' ').replace(/_+/g,' ').trim();\n  return [board, grade, subject].filter(p => p && p.trim()).join(' ');\n})() }}\"\n}"
              }
            ]
          }
        }
      },
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1.1,
      "position": [
        -32,
        -400
      ],
      "id": "0421b18f-bbf3-455a-8082-b77f022eba5a",
      "name": "Default Data Loader",
      "notesInFlow": false
    },
    {
      "parameters": {
        "chunkSize": 1500,
        "chunkOverlap": 200,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        -16,
        -208
      ],
      "id": "2e45999a-90e4-4e4b-a532-ad7c2e3085a6",
      "name": "Recursive Character Text Splitter"
    },
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        -1344,
        176
      ],
      "id": "b149857a-449b-469f-abe9-d0e8233fb51f",
      "name": "Telegram Trigger",
      "webhookId": "549f27ed-e034-42c4-add3-dec340215d3e",
      "credentials": {
        "telegramApi": {
          "id": "7Fhs1ZHhW3ynKhRj",
          "name": "syllabus bot"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{(function(){const q=$('Parse Query').item.json||{};const p=[];if(q.board)p.push(q.board);if(q.grade)p.push('class '+q.grade);if(q.subject)p.push(q.subject);if(q.year)p.push('('+q.year+')');const orig=$('Telegram Trigger').item&&$('Telegram Trigger').item.json&&$('Telegram Trigger').item.json.message?$('Telegram Trigger').item.json.message.text:'';const ask=(q.doc_type||'syllabus info')+' for '+(p.join(' ')||orig);return 'Answer ONLY from the uploaded syllabus documents. If not found, reply exactly: \"Not found in syllabus.\" Request: '+ask+(orig&&p.length?' Original query: \"'+orig+'\".':'');})()}}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        -336,
        192
      ],
      "id": "776d20c0-8f6d-4da4-8006-57dde7bec6f6",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-4.1-mini",
          "mode": "list",
          "cachedResultName": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -336,
        480
      ],
      "id": "9bb97af5-d7bc-40aa-9fde-403fcd5241da",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "fkYUXOJXVkie0eLD",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "{{ String(   $('Telegram Trigger').item.json.message?.chat?.id    || $('Telegram Trigger').item.json.message?.from?.id    || $json.chat_id ) }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -192,
        480
      ],
      "id": "2624bd58-6750-4cbc-a347-d906031aa11e",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.from.id }}",
        "text": "={{ $json.output }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        48,
        192
      ],
      "id": "01c914f9-af08-42e8-8c73-74af01fc31c5",
      "name": "Send a text message1",
      "webhookId": "0c8a34a4-d600-41c0-b059-63029bdf732f",
      "credentials": {
        "telegramApi": {
          "id": "7Fhs1ZHhW3ynKhRj",
          "name": "syllabus bot"
        }
      }
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        -48,
        672
      ],
      "id": "8a3978c4-9b6c-4bb6-8b01-0db60b2e2765",
      "name": "Embeddings OpenAI1",
      "credentials": {
        "openAiApi": {
          "id": "fkYUXOJXVkie0eLD",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "mode": "retrieve-as-tool",
        "toolDescription": "={{ $('Telegram Trigger').item.json.message.text }}",
        "pineconeIndex": {
          "__rl": true,
          "value": "syllabusbot",
          "mode": "list",
          "cachedResultName": "syllabusbot"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
      "typeVersion": 1.3,
      "position": [
        -64,
        464
      ],
      "id": "8c07fef9-afd3-4abe-9de6-32b87fa3ba2f",
      "name": "Syllabusbot",
      "credentials": {
        "pineconeApi": {
          "id": "ukQUt9MCivAOTtX8",
          "name": "syllabusbot"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "\n// Input from Telegram: $json.message.text\n// Output: { query, board, grade, subject, year, doc_type }\n\nconst textRaw = ($input.first().json.message.text || '').trim();\nconst t = textRaw.toLowerCase();\n\n// 1) board\nlet board = null;\nif (/\\bicse\\b/.test(t)) board = 'ICSE';\nif (/\\bcbse\\b/.test(t)) board = 'CBSE';\n\n// 2) year: 2023-24 / 2023_24 / 2026\nlet year = null;\nconst my = t.match(/20\\d{2}[-_]\\d{2}/) || t.match(/20\\d{2}/);\nif (my) year = my[0].replace(/_/g,'-');\n\n// 3) doc_type\nlet doc_type = null;\nif (/mark(ing)?[-\\s]?scheme/.test(t)) doc_type = 'MarkingScheme';\nelse if (/blue\\s?print/.test(t))      doc_type = 'Blueprint';\nelse if (/practical/.test(t))         doc_type = 'Practical';\nelse if (/syllabus|syllabi/.test(t))  doc_type = 'Syllabus';\n\n// 4) grade (supports \"class 12\", \"12\" with 'class', or \"9-10\")\nlet grade = null;\nconst gRange = t.match(/\\b(\\d{1,2})\\s*[-â€“]\\s*(\\d{1,2})\\b/);\nconst gClass = t.match(/\\bclass\\s*(\\d{1,2})\\b/);\nif (gRange) { grade = gRange[1] + '-' + gRange[2];\n            } else if (gClass) { grade = gClass[1];\n                               }                 \n// roman numerals / words\nconst mRoman=t.match(/\\bclass\\s*(ix|x|xi|xii)\\b/i);\nif (mRoman){\n  const v = mRoman[1].toLowerCase();\n  if (v === 'ix') grade = '9';\n  else if (v === 'x') grade = '10';\n  else if (v === 'xi') grade = '11';\n  else if (v === 'xii') grade = '12';\n}\n\nconst mWord=t.match(/\\bclass\\s*(nine|ten|eleven|twelve)\\b/i);\nif (mWord){\n  const w = mWord[1].toLowerCase();\n  if (w === 'nine') grade = '9';\n  else if (w === 'ten') grade = '10';\n  else if (w === 'eleven') grade = '11';\n  else if (w === 'twelve') grade = '12';\n}\n\n// 5) subject (dictionary + fallback)\nconst dict = [\n  'biology','chemistry','physics','mathematics','maths','computer applications',\n  'computer science','english core','english elective','english','economics',\n  'political science','general studies','business studies','yoga','sociology',\n  'history','geography','hindi','kannada','tamil','telugu','malayalam','marathi',\n  'legal studies','home science','environmental science','environmental applications',\n  'mass media communication','hospitality management','technical drawing applications',\n  'commercial studies','classical language','psychology','physical education',\n  'ncc','social science'\n];\n\nlet subject = null;\nlet best = '';\nfor (const s of dict) {\n  const patt = '\\\\b' + s.replace(/\\s+/g,'\\\\s+')+'\\\\b';\n  const re = new RegExp(patt,'i');\n  if (re.test(textRaw) && s.length > best.length) best = s;\n}\nif (best) {\n  // normalize title case & a few names\n  const norm = best\n    .replace(/\\bmaths\\b/i,'mathematics')\n    .replace(/\\benglish core\\b/i,'English Core')\n    .replace(/\\benglish elective\\b/i,'English Elective')\n    .replace(/\\bcomputer applications\\b/i,'Computer Applications')\n    .replace(/\\bcomputer science\\b/i,'Computer Science')\n    .replace(/\\bpolitical science\\b/i,'Political Science');\n  subject = norm.split(' ')\n    .map(w => w.charAt(0).toUpperCase()+w.slice(1))\n    .join(' ');\n}\n\n// fallback: strip known tokens and keep remainder\nif (!subject) {\n  let tmp = t\n    .replace(/\\b(cbse|icse)\\b/gi,' ')\n    .replace(/class\\s*(ix|x|xi|xii|\\d{1,2})(\\s*â€“\\s*(ix|x|xi|xii|\\d{1,2}))?/gi,' ')\n    .replace(/20\\d{2}([_-]\\d{2})?/g,' ')\n    .replace(/syllabus|mark(ing)?[-\\s]?scheme|blue\\s?print|practical/gi,' ')\n    .replace(/\\b(for|of|in|on|the)\\b/gi,' ')\n    .replace(/[^\\p{L}\\p{N}\\s]/gu,' ')\n    .replace(/\\s+/g,' ')\n    .trim();\n  if (tmp) {\n    subject = tmp.split(' ')\n      .map(w => w.charAt(0).toUpperCase()+w.slice(1))\n      .join(' ');\n  }\n}\n\nreturn [{ json: { query: textRaw, board, grade, subject, year, doc_type } }];\n\n\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1120,
        176
      ],
      "id": "1b50fe7f-5742-409b-b102-15058820e823",
      "name": "Parse Query"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Guardrail for Syllabus Bot\n// Input (from previous node): { query, board, grade, subject, year, doc_type }\n// Output: same fields + guard_ok (boolean) + guard_reason (string)\n\nconst j = $json;\n\n// normalize helper\nconst norm = v => (v ?? '').toString().trim();\n\n// normalized fields\nconst board = norm(j.board).toUpperCase();\nconst grade = norm(j.grade);\nconst subject = norm(j.subject);\nconst docType = norm(j.doc_type);\n\n// rules\nconst validBoard = ['CBSE', 'ICSE'].includes(board);\nconst hasDetail = [grade, subject, docType].some(v => v.length > 0);\n\n// result\nconst guard_ok = validBoard && hasDetail;\n\nlet guard_reason = 'ok';\nif (!validBoard) {\n  guard_reason = 'Please specify the board as CBSE or ICSE.';\n} else if (!hasDetail) {\n  guard_reason = 'Please include at least one of: grade (e.g., \"12\" or \"9-10\"), subject (e.g., \"Physics\"), or document type (\"Syllabus\", \"MarkingScheme\", \"Blueprint\", \"Practical\").';\n}\n\n// return merged item\nreturn {\n  json: {\n    ...j,\n    // keep cleaned values if you want to pass them on\n    board: board || j.board,\n    grade,\n    subject,\n    doc_type: docType,\n    guard_ok,\n    guard_reason,\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -880,
        176
      ],
      "id": "77585976-2f7d-4dc1-837e-771ce2d2975d",
      "name": "Guardrail Query"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "d551886f-7576-4eba-a4a9-fb8b59de60aa",
              "leftValue": "={{ $json.guard_ok }}",
              "rightValue": "^(CBSE|ICSE)$",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "or"
        },
        "options": {
          "ignoreCase": false
        }
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -656,
        288
      ],
      "id": "8cd6b2c4-d230-4c41-9dfc-6a0e7874895e",
      "name": "If"
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.from.id }}",
        "text": "I can help, but I need at least: * Board (CBSE or ICSE), and * Class (e.g., 12 or 9â€“10) OR Subject (e.g., Physics)  Optionally: Year (e.g., 2023-24) and Type (Syllabus / Marking Scheme / Blueprint).  Example: \"cbse class 12 physics syllabus 2023-24\"",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        -592,
        544
      ],
      "id": "f9fc7177-00d2-4847-ba1a-226cd2391212",
      "name": "Send a text message",
      "webhookId": "0c8a34a4-d600-41c0-b059-63029bdf732f",
      "credentials": {
        "telegramApi": {
          "id": "7Fhs1ZHhW3ynKhRj",
          "name": "syllabus bot"
        }
      }
    },
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "triggerOn": "specificFolder",
        "folderToWatch": {
          "__rl": true,
          "value": "1dZnnOpX7K7VdOd7z4kmjfGO9k-bVF8SY",
          "mode": "list",
          "cachedResultName": "High School",
          "cachedResultUrl": "https://drive.google.com/drive/folders/1dZnnOpX7K7VdOd7z4kmjfGO9k-bVF8SY"
        },
        "event": "fileCreated",
        "options": {}
      },
      "type": "n8n-nodes-base.googleDriveTrigger",
      "typeVersion": 1,
      "position": [
        -976,
        -592
      ],
      "id": "78ec3662-4f11-48bb-b90b-819e2737bd77",
      "name": "Trigger High School",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "7eCI7AxMHg1lfcEH",
          "name": "Google Drive Syllabus"
        }
      }
    },
    {
      "parameters": {
        "resource": "fileFolder",
        "queryString": ".pdf",
        "limit": 75,
        "filter": {
          "folderId": {
            "__rl": true,
            "value": "1dZnnOpX7K7VdOd7z4kmjfGO9k-bVF8SY",
            "mode": "list",
            "cachedResultName": "High School",
            "cachedResultUrl": "https://drive.google.com/drive/folders/1dZnnOpX7K7VdOd7z4kmjfGO9k-bVF8SY"
          }
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -736,
        -592
      ],
      "id": "e8ca2991-e002-43c7-bf08-5d9b70326823",
      "name": "Files From High School Folder",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "7eCI7AxMHg1lfcEH",
          "name": "Google Drive Syllabus"
        }
      }
    },
    {
      "parameters": {
        "operation": "download",
        "fileId": {
          "__rl": true,
          "value": "={{ $json.id }}",
          "mode": "id"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleDrive",
      "typeVersion": 3,
      "position": [
        -448,
        -592
      ],
      "id": "b8b30d3b-0656-40b2-a475-9437af262ba8",
      "name": "Download",
      "credentials": {
        "googleDriveOAuth2Api": {
          "id": "7eCI7AxMHg1lfcEH",
          "name": "Google Drive Syllabus"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Pinecone Vector Store",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Default Data Loader": {
      "ai_document": [
        [
          {
            "node": "Pinecone Vector Store",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Recursive Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Parse Query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Send a text message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI1": {
      "ai_embedding": [
        [
          {
            "node": "Syllabusbot",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Syllabusbot": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Parse Query": {
      "main": [
        [
          {
            "node": "Guardrail Query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Guardrail Query": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pinecone Vector Store": {
      "main": [
        []
      ]
    },
    "Trigger High School": {
      "main": [
        [
          {
            "node": "Files From High School Folder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Files From High School Folder": {
      "main": [
        [
          {
            "node": "Download",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download": {
      "main": [
        [
          {
            "node": "Pinecone Vector Store",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "df90c17a-238d-46a7-b681-1136b8b1490a",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "65397da1724e8bc6b1c03e7622f76a50f708f7f7b8e3993c5add29845b20f434"
  },
  "id": "MNMIlglQjPgYiRx4",
  "tags": []
}